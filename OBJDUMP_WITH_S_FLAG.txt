
a.out:     file format elf64-x86-64


Disassembly of section .init:

00000000000005c0 <_init>:
 5c0:	48 83 ec 08          	sub    $0x8,%rsp
 5c4:	48 8b 05 15 1a 20 00 	mov    0x201a15(%rip),%rax        # 201fe0 <__gmon_start__>
 5cb:	48 85 c0             	test   %rax,%rax
 5ce:	74 02                	je     5d2 <_init+0x12>
 5d0:	ff d0                	callq  *%rax
 5d2:	48 83 c4 08          	add    $0x8,%rsp
 5d6:	c3                   	retq   

Disassembly of section .plt:

00000000000005e0 <.plt>:
 5e0:	ff 35 22 1a 20 00    	pushq  0x201a22(%rip)        # 202008 <_GLOBAL_OFFSET_TABLE_+0x8>
 5e6:	ff 25 24 1a 20 00    	jmpq   *0x201a24(%rip)        # 202010 <_GLOBAL_OFFSET_TABLE_+0x10>
 5ec:	0f 1f 40 00          	nopl   0x0(%rax)

00000000000005f0 <__stack_chk_fail@plt>:
 5f0:	ff 25 22 1a 20 00    	jmpq   *0x201a22(%rip)        # 202018 <__stack_chk_fail@GLIBC_2.4>
 5f6:	68 00 00 00 00       	pushq  $0x0
 5fb:	e9 e0 ff ff ff       	jmpq   5e0 <.plt>

0000000000000600 <printf@plt>:
 600:	ff 25 1a 1a 20 00    	jmpq   *0x201a1a(%rip)        # 202020 <printf@GLIBC_2.2.5>
 606:	68 01 00 00 00       	pushq  $0x1
 60b:	e9 d0 ff ff ff       	jmpq   5e0 <.plt>

0000000000000610 <__isoc99_scanf@plt>:
 610:	ff 25 12 1a 20 00    	jmpq   *0x201a12(%rip)        # 202028 <__isoc99_scanf@GLIBC_2.7>
 616:	68 02 00 00 00       	pushq  $0x2
 61b:	e9 c0 ff ff ff       	jmpq   5e0 <.plt>

Disassembly of section .text:

0000000000000620 <main>:
    } while (y == 7);

    printf("%d\n", y);
}

int main() {
 620:	48 83 ec 18          	sub    $0x18,%rsp
 624:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
 62b:	00 00 
 62d:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
 632:	31 c0                	xor    %eax,%eax
    // which bar?
    bar();
 634:	e8 67 01 00 00       	callq  7a0 <bar>
    complicated_func();
 639:	31 c0                	xor    %eax,%eax
 63b:	e8 f0 04 00 00       	callq  b30 <complicated_func>
#include <stdio.h>
#define NO_INLINE __attribute__((noinline))

inline int blah() {
    int x;
    scanf("%d", &x);
 640:	48 8d 74 24 04       	lea    0x4(%rsp),%rsi
 645:	48 8d 3d 2c 06 00 00 	lea    0x62c(%rip),%rdi        # c78 <_IO_stdin_used+0x8>
 64c:	31 c0                	xor    %eax,%eax
 64e:	e8 bd ff ff ff       	callq  610 <__isoc99_scanf@plt>
    printf("%d\n", nbsp);
 653:	48 8d 3d 1a 06 00 00 	lea    0x61a(%rip),%rdi        # c74 <_IO_stdin_used+0x4>
 65a:	31 c0                	xor    %eax,%eax
 65c:	be 05 00 00 00       	mov    $0x5,%esi
 661:	e8 9a ff ff ff       	callq  600 <printf@plt>
    // Notice that the source before this comes from a different file
    blah();
    html_test();
    return 0;
}
 666:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
 66b:	64 48 33 14 25 28 00 	xor    %fs:0x28,%rdx
 672:	00 00 
 674:	75 07                	jne    67d <main+0x5d>
 676:	31 c0                	xor    %eax,%eax
 678:	48 83 c4 18          	add    $0x18,%rsp
 67c:	c3                   	retq   
 67d:	e8 6e ff ff ff       	callq  5f0 <__stack_chk_fail@plt>
 682:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
 689:	00 00 00 
 68c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000000690 <_start>:
 690:	31 ed                	xor    %ebp,%ebp
 692:	49 89 d1             	mov    %rdx,%r9
 695:	5e                   	pop    %rsi
 696:	48 89 e2             	mov    %rsp,%rdx
 699:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
 69d:	50                   	push   %rax
 69e:	54                   	push   %rsp
 69f:	4c 8d 05 ba 05 00 00 	lea    0x5ba(%rip),%r8        # c60 <__libc_csu_fini>
 6a6:	48 8d 0d 43 05 00 00 	lea    0x543(%rip),%rcx        # bf0 <__libc_csu_init>
 6ad:	48 8d 3d 6c ff ff ff 	lea    -0x94(%rip),%rdi        # 620 <main>
 6b4:	ff 15 1e 19 20 00    	callq  *0x20191e(%rip)        # 201fd8 <__libc_start_main@GLIBC_2.2.5>
 6ba:	f4                   	hlt    
 6bb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000006c0 <deregister_tm_clones>:
 6c0:	48 8d 3d 79 19 20 00 	lea    0x201979(%rip),%rdi        # 202040 <__TMC_END__>
 6c7:	55                   	push   %rbp
 6c8:	48 8d 05 71 19 20 00 	lea    0x201971(%rip),%rax        # 202040 <__TMC_END__>
 6cf:	48 39 f8             	cmp    %rdi,%rax
 6d2:	48 89 e5             	mov    %rsp,%rbp
 6d5:	74 19                	je     6f0 <deregister_tm_clones+0x30>
 6d7:	48 8b 05 f2 18 20 00 	mov    0x2018f2(%rip),%rax        # 201fd0 <_ITM_deregisterTMCloneTable>
 6de:	48 85 c0             	test   %rax,%rax
 6e1:	74 0d                	je     6f0 <deregister_tm_clones+0x30>
 6e3:	5d                   	pop    %rbp
 6e4:	ff e0                	jmpq   *%rax
 6e6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
 6ed:	00 00 00 
 6f0:	5d                   	pop    %rbp
 6f1:	c3                   	retq   
 6f2:	0f 1f 40 00          	nopl   0x0(%rax)
 6f6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
 6fd:	00 00 00 

0000000000000700 <register_tm_clones>:
 700:	48 8d 3d 39 19 20 00 	lea    0x201939(%rip),%rdi        # 202040 <__TMC_END__>
 707:	48 8d 35 32 19 20 00 	lea    0x201932(%rip),%rsi        # 202040 <__TMC_END__>
 70e:	55                   	push   %rbp
 70f:	48 29 fe             	sub    %rdi,%rsi
 712:	48 89 e5             	mov    %rsp,%rbp
 715:	48 c1 fe 03          	sar    $0x3,%rsi
 719:	48 89 f0             	mov    %rsi,%rax
 71c:	48 c1 e8 3f          	shr    $0x3f,%rax
 720:	48 01 c6             	add    %rax,%rsi
 723:	48 d1 fe             	sar    %rsi
 726:	74 18                	je     740 <register_tm_clones+0x40>
 728:	48 8b 05 b9 18 20 00 	mov    0x2018b9(%rip),%rax        # 201fe8 <_ITM_registerTMCloneTable>
 72f:	48 85 c0             	test   %rax,%rax
 732:	74 0c                	je     740 <register_tm_clones+0x40>
 734:	5d                   	pop    %rbp
 735:	ff e0                	jmpq   *%rax
 737:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
 73e:	00 00 
 740:	5d                   	pop    %rbp
 741:	c3                   	retq   
 742:	0f 1f 40 00          	nopl   0x0(%rax)
 746:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
 74d:	00 00 00 

0000000000000750 <__do_global_dtors_aux>:
 750:	80 3d e9 18 20 00 00 	cmpb   $0x0,0x2018e9(%rip)        # 202040 <__TMC_END__>
 757:	75 2f                	jne    788 <__do_global_dtors_aux+0x38>
 759:	48 83 3d 8f 18 20 00 	cmpq   $0x0,0x20188f(%rip)        # 201ff0 <__cxa_finalize@GLIBC_2.2.5>
 760:	00 
 761:	55                   	push   %rbp
 762:	48 89 e5             	mov    %rsp,%rbp
 765:	74 0d                	je     774 <__do_global_dtors_aux+0x24>
 767:	48 8b 3d ca 18 20 00 	mov    0x2018ca(%rip),%rdi        # 202038 <__dso_handle>
 76e:	ff 15 7c 18 20 00    	callq  *0x20187c(%rip)        # 201ff0 <__cxa_finalize@GLIBC_2.2.5>
 774:	e8 47 ff ff ff       	callq  6c0 <deregister_tm_clones>
 779:	c6 05 c0 18 20 00 01 	movb   $0x1,0x2018c0(%rip)        # 202040 <__TMC_END__>
 780:	5d                   	pop    %rbp
 781:	c3                   	retq   
 782:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
 788:	f3 c3                	repz retq 
 78a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000000790 <frame_dummy>:
 790:	55                   	push   %rbp
 791:	48 89 e5             	mov    %rsp,%rbp
 794:	5d                   	pop    %rbp
 795:	e9 66 ff ff ff       	jmpq   700 <register_tm_clones>
 79a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

00000000000007a0 <bar>:
}
 7a0:	c3                   	retq   
 7a1:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
 7a6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
 7ad:	00 00 00 

00000000000007b0 <fib>:
unsigned int fib(unsigned int y) {
 7b0:	41 57                	push   %r15
 7b2:	41 56                	push   %r14
 7b4:	41 55                	push   %r13
 7b6:	41 54                	push   %r12
 7b8:	55                   	push   %rbp
 7b9:	53                   	push   %rbx
 7ba:	48 83 ec 68          	sub    $0x68,%rsp
    if (y <= 1) {
 7be:	83 ff 01             	cmp    $0x1,%edi
unsigned int fib(unsigned int y) {
 7c1:	89 7c 24 54          	mov    %edi,0x54(%rsp)
    if (y <= 1) {
 7c5:	c7 44 24 4c 00 00 00 	movl   $0x0,0x4c(%rsp)
 7cc:	00 
 7cd:	0f 86 4b 02 00 00    	jbe    a1e <fib+0x26e>
 7d3:	89 fa                	mov    %edi,%edx
 7d5:	8d 4f fd             	lea    -0x3(%rdi),%ecx
 7d8:	8d 47 ff             	lea    -0x1(%rdi),%eax
 7db:	83 ea 02             	sub    $0x2,%edx
 7de:	83 e2 fe             	and    $0xfffffffe,%edx
 7e1:	29 d1                	sub    %edx,%ecx
 7e3:	89 4c 24 58          	mov    %ecx,0x58(%rsp)
 7e7:	83 f8 01             	cmp    $0x1,%eax
 7ea:	0f 86 d9 02 00 00    	jbe    ac9 <fib+0x319>
 7f0:	8d 70 fe             	lea    -0x2(%rax),%esi
 7f3:	8d 50 ff             	lea    -0x1(%rax),%edx
 7f6:	83 e8 03             	sub    $0x3,%eax
 7f9:	c7 44 24 40 00 00 00 	movl   $0x0,0x40(%rsp)
 800:	00 
 801:	89 74 24 44          	mov    %esi,0x44(%rsp)
 805:	83 e6 fe             	and    $0xfffffffe,%esi
 808:	29 f0                	sub    %esi,%eax
 80a:	89 44 24 5c          	mov    %eax,0x5c(%rsp)
 80e:	83 fa 01             	cmp    $0x1,%edx
 811:	0f 86 9e 02 00 00    	jbe    ab5 <fib+0x305>
 817:	8d 4a fe             	lea    -0x2(%rdx),%ecx
 81a:	8d 42 ff             	lea    -0x1(%rdx),%eax
 81d:	83 ea 03             	sub    $0x3,%edx
 820:	c7 44 24 38 00 00 00 	movl   $0x0,0x38(%rsp)
 827:	00 
 828:	89 4c 24 48          	mov    %ecx,0x48(%rsp)
 82c:	83 e1 fe             	and    $0xfffffffe,%ecx
 82f:	29 ca                	sub    %ecx,%edx
 831:	89 54 24 50          	mov    %edx,0x50(%rsp)
 835:	83 f8 01             	cmp    $0x1,%eax
 838:	0f 86 63 02 00 00    	jbe    aa1 <fib+0x2f1>
 83e:	8d 70 fe             	lea    -0x2(%rax),%esi
 841:	8d 50 ff             	lea    -0x1(%rax),%edx
 844:	83 e8 03             	sub    $0x3,%eax
 847:	c7 44 24 30 00 00 00 	movl   $0x0,0x30(%rsp)
 84e:	00 
 84f:	89 74 24 3c          	mov    %esi,0x3c(%rsp)
 853:	83 e6 fe             	and    $0xfffffffe,%esi
 856:	29 f0                	sub    %esi,%eax
 858:	89 44 24 34          	mov    %eax,0x34(%rsp)
 85c:	83 fa 01             	cmp    $0x1,%edx
 85f:	0f 86 24 02 00 00    	jbe    a89 <fib+0x2d9>
 865:	8d 4a fe             	lea    -0x2(%rdx),%ecx
 868:	8d 42 ff             	lea    -0x1(%rdx),%eax
 86b:	83 ea 03             	sub    $0x3,%edx
 86e:	c7 44 24 24 00 00 00 	movl   $0x0,0x24(%rsp)
 875:	00 
 876:	89 4c 24 2c          	mov    %ecx,0x2c(%rsp)
 87a:	83 e1 fe             	and    $0xfffffffe,%ecx
 87d:	29 ca                	sub    %ecx,%edx
 87f:	89 54 24 28          	mov    %edx,0x28(%rsp)
 883:	83 f8 01             	cmp    $0x1,%eax
 886:	0f 86 e9 01 00 00    	jbe    a75 <fib+0x2c5>
 88c:	8d 48 fe             	lea    -0x2(%rax),%ecx
 88f:	44 8d 70 ff          	lea    -0x1(%rax),%r14d
 893:	83 e8 03             	sub    $0x3,%eax
 896:	c7 44 24 18 00 00 00 	movl   $0x0,0x18(%rsp)
 89d:	00 
 89e:	89 4c 24 20          	mov    %ecx,0x20(%rsp)
 8a2:	83 e1 fe             	and    $0xfffffffe,%ecx
 8a5:	29 c8                	sub    %ecx,%eax
 8a7:	89 44 24 1c          	mov    %eax,0x1c(%rsp)
 8ab:	41 83 fe 01          	cmp    $0x1,%r14d
 8af:	0f 86 ab 01 00 00    	jbe    a60 <fib+0x2b0>
 8b5:	41 8d 46 fe          	lea    -0x2(%r14),%eax
 8b9:	45 8d 66 ff          	lea    -0x1(%r14),%r12d
 8bd:	41 83 ee 03          	sub    $0x3,%r14d
 8c1:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%rsp)
 8c8:	00 
 8c9:	89 44 24 14          	mov    %eax,0x14(%rsp)
 8cd:	83 e0 fe             	and    $0xfffffffe,%eax
 8d0:	41 29 c6             	sub    %eax,%r14d
 8d3:	44 89 74 24 10       	mov    %r14d,0x10(%rsp)
 8d8:	41 83 fc 01          	cmp    $0x1,%r12d
 8dc:	0f 86 66 01 00 00    	jbe    a48 <fib+0x298>
 8e2:	41 8d 44 24 fe       	lea    -0x2(%r12),%eax
 8e7:	41 8d 6c 24 fd       	lea    -0x3(%r12),%ebp
 8ec:	41 8d 5c 24 ff       	lea    -0x1(%r12),%ebx
 8f1:	45 31 ed             	xor    %r13d,%r13d
 8f4:	89 44 24 08          	mov    %eax,0x8(%rsp)
 8f8:	83 e0 fe             	and    $0xfffffffe,%eax
 8fb:	29 c5                	sub    %eax,%ebp
 8fd:	83 fb 01             	cmp    $0x1,%ebx
 900:	0f 86 32 01 00 00    	jbe    a38 <fib+0x288>
 906:	44 8d 63 fe          	lea    -0x2(%rbx),%r12d
 90a:	44 8d 73 ff          	lea    -0x1(%rbx),%r14d
 90e:	83 eb 03             	sub    $0x3,%ebx
 911:	45 31 ff             	xor    %r15d,%r15d
 914:	44 89 e0             	mov    %r12d,%eax
 917:	83 e0 fe             	and    $0xfffffffe,%eax
 91a:	29 c3                	sub    %eax,%ebx
        return y;
    }
    return fib(y - 1) + fib(y - 2);
 91c:	44 89 f7             	mov    %r14d,%edi
 91f:	41 83 ee 02          	sub    $0x2,%r14d
 923:	e8 88 fe ff ff       	callq  7b0 <fib>
 928:	41 01 c7             	add    %eax,%r15d
    if (y <= 1) {
 92b:	44 39 f3             	cmp    %r14d,%ebx
 92e:	75 ec                	jne    91c <fib+0x16c>
 930:	44 89 e3             	mov    %r12d,%ebx
 933:	83 e3 01             	and    $0x1,%ebx
 936:	44 01 fb             	add    %r15d,%ebx
 939:	41 01 dd             	add    %ebx,%r13d
 93c:	44 39 e5             	cmp    %r12d,%ebp
 93f:	44 89 e3             	mov    %r12d,%ebx
 942:	75 b9                	jne    8fd <fib+0x14d>
 944:	44 8b 64 24 08       	mov    0x8(%rsp),%r12d
 949:	41 83 e4 01          	and    $0x1,%r12d
 94d:	45 01 ec             	add    %r13d,%r12d
 950:	44 01 64 24 0c       	add    %r12d,0xc(%rsp)
 955:	44 8b 64 24 08       	mov    0x8(%rsp),%r12d
 95a:	44 39 64 24 10       	cmp    %r12d,0x10(%rsp)
 95f:	0f 85 73 ff ff ff    	jne    8d8 <fib+0x128>
 965:	44 8b 74 24 14       	mov    0x14(%rsp),%r14d
 96a:	41 83 e6 01          	and    $0x1,%r14d
 96e:	44 03 74 24 0c       	add    0xc(%rsp),%r14d
 973:	44 01 74 24 18       	add    %r14d,0x18(%rsp)
 978:	44 8b 74 24 14       	mov    0x14(%rsp),%r14d
 97d:	44 39 74 24 1c       	cmp    %r14d,0x1c(%rsp)
 982:	0f 85 23 ff ff ff    	jne    8ab <fib+0xfb>
 988:	8b 44 24 20          	mov    0x20(%rsp),%eax
 98c:	83 e0 01             	and    $0x1,%eax
 98f:	03 44 24 18          	add    0x18(%rsp),%eax
 993:	01 44 24 24          	add    %eax,0x24(%rsp)
 997:	8b 44 24 20          	mov    0x20(%rsp),%eax
 99b:	39 44 24 28          	cmp    %eax,0x28(%rsp)
 99f:	0f 85 de fe ff ff    	jne    883 <fib+0xd3>
 9a5:	8b 44 24 2c          	mov    0x2c(%rsp),%eax
 9a9:	8b 54 24 2c          	mov    0x2c(%rsp),%edx
 9ad:	83 e0 01             	and    $0x1,%eax
 9b0:	03 44 24 24          	add    0x24(%rsp),%eax
 9b4:	01 44 24 30          	add    %eax,0x30(%rsp)
 9b8:	39 54 24 34          	cmp    %edx,0x34(%rsp)
 9bc:	0f 85 9a fe ff ff    	jne    85c <fib+0xac>
 9c2:	8b 44 24 3c          	mov    0x3c(%rsp),%eax
 9c6:	83 e0 01             	and    $0x1,%eax
 9c9:	03 44 24 30          	add    0x30(%rsp),%eax
 9cd:	01 44 24 38          	add    %eax,0x38(%rsp)
 9d1:	8b 44 24 3c          	mov    0x3c(%rsp),%eax
 9d5:	39 44 24 50          	cmp    %eax,0x50(%rsp)
 9d9:	0f 85 56 fe ff ff    	jne    835 <fib+0x85>
 9df:	8b 54 24 48          	mov    0x48(%rsp),%edx
 9e3:	83 e2 01             	and    $0x1,%edx
 9e6:	03 54 24 38          	add    0x38(%rsp),%edx
 9ea:	01 54 24 40          	add    %edx,0x40(%rsp)
 9ee:	8b 54 24 48          	mov    0x48(%rsp),%edx
 9f2:	39 54 24 5c          	cmp    %edx,0x5c(%rsp)
 9f6:	0f 85 12 fe ff ff    	jne    80e <fib+0x5e>
 9fc:	8b 44 24 44          	mov    0x44(%rsp),%eax
 a00:	83 e0 01             	and    $0x1,%eax
 a03:	03 44 24 40          	add    0x40(%rsp),%eax
 a07:	01 44 24 4c          	add    %eax,0x4c(%rsp)
 a0b:	8b 44 24 44          	mov    0x44(%rsp),%eax
 a0f:	39 44 24 58          	cmp    %eax,0x58(%rsp)
 a13:	0f 85 ce fd ff ff    	jne    7e7 <fib+0x37>
 a19:	83 64 24 54 01       	andl   $0x1,0x54(%rsp)
 a1e:	8b 44 24 54          	mov    0x54(%rsp),%eax
 a22:	03 44 24 4c          	add    0x4c(%rsp),%eax
}
 a26:	48 83 c4 68          	add    $0x68,%rsp
 a2a:	5b                   	pop    %rbx
 a2b:	5d                   	pop    %rbp
 a2c:	41 5c                	pop    %r12
 a2e:	41 5d                	pop    %r13
 a30:	41 5e                	pop    %r14
 a32:	41 5f                	pop    %r15
 a34:	c3                   	retq   
 a35:	0f 1f 00             	nopl   (%rax)
    if (y <= 1) {
 a38:	45 31 ff             	xor    %r15d,%r15d
 a3b:	44 8d 63 fe          	lea    -0x2(%rbx),%r12d
 a3f:	e9 f2 fe ff ff       	jmpq   936 <fib+0x186>
 a44:	0f 1f 40 00          	nopl   0x0(%rax)
 a48:	41 8d 44 24 fe       	lea    -0x2(%r12),%eax
 a4d:	45 31 ed             	xor    %r13d,%r13d
 a50:	89 44 24 08          	mov    %eax,0x8(%rsp)
 a54:	e9 f4 fe ff ff       	jmpq   94d <fib+0x19d>
 a59:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
 a60:	41 8d 46 fe          	lea    -0x2(%r14),%eax
 a64:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%rsp)
 a6b:	00 
 a6c:	89 44 24 14          	mov    %eax,0x14(%rsp)
 a70:	e9 f9 fe ff ff       	jmpq   96e <fib+0x1be>
 a75:	8d 50 fe             	lea    -0x2(%rax),%edx
 a78:	c7 44 24 18 00 00 00 	movl   $0x0,0x18(%rsp)
 a7f:	00 
 a80:	89 54 24 20          	mov    %edx,0x20(%rsp)
 a84:	e9 06 ff ff ff       	jmpq   98f <fib+0x1df>
 a89:	8d 72 fe             	lea    -0x2(%rdx),%esi
 a8c:	89 d0                	mov    %edx,%eax
 a8e:	c7 44 24 24 00 00 00 	movl   $0x0,0x24(%rsp)
 a95:	00 
 a96:	89 74 24 2c          	mov    %esi,0x2c(%rsp)
 a9a:	89 f2                	mov    %esi,%edx
 a9c:	e9 0f ff ff ff       	jmpq   9b0 <fib+0x200>
 aa1:	8d 48 fe             	lea    -0x2(%rax),%ecx
 aa4:	c7 44 24 30 00 00 00 	movl   $0x0,0x30(%rsp)
 aab:	00 
 aac:	89 4c 24 3c          	mov    %ecx,0x3c(%rsp)
 ab0:	e9 14 ff ff ff       	jmpq   9c9 <fib+0x219>
 ab5:	8d 42 fe             	lea    -0x2(%rdx),%eax
 ab8:	c7 44 24 38 00 00 00 	movl   $0x0,0x38(%rsp)
 abf:	00 
 ac0:	89 44 24 48          	mov    %eax,0x48(%rsp)
 ac4:	e9 1d ff ff ff       	jmpq   9e6 <fib+0x236>
 ac9:	8d 70 fe             	lea    -0x2(%rax),%esi
 acc:	c7 44 24 40 00 00 00 	movl   $0x0,0x40(%rsp)
 ad3:	00 
 ad4:	89 74 24 44          	mov    %esi,0x44(%rsp)
 ad8:	e9 26 ff ff ff       	jmpq   a03 <fib+0x253>
 add:	0f 1f 00             	nopl   (%rax)

0000000000000ae0 <foo>:
    printf("%d\n", x);
 ae0:	48 8d 3d 8d 01 00 00 	lea    0x18d(%rip),%rdi        # c74 <_IO_stdin_used+0x4>
int foo() {
 ae7:	48 83 ec 08          	sub    $0x8,%rsp
    printf("%d\n", x);
 aeb:	be 56 13 00 00       	mov    $0x1356,%esi
 af0:	31 c0                	xor    %eax,%eax
 af2:	e8 09 fb ff ff       	callq  600 <printf@plt>
}
 af7:	b8 56 13 00 00       	mov    $0x1356,%eax
 afc:	48 83 c4 08          	add    $0x8,%rsp
 b00:	c3                   	retq   
 b01:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
 b06:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
 b0d:	00 00 00 

0000000000000b10 <html_test>:
    printf("%d\n", nbsp);
 b10:	48 8d 3d 5d 01 00 00 	lea    0x15d(%rip),%rdi        # c74 <_IO_stdin_used+0x4>
 b17:	be 05 00 00 00       	mov    $0x5,%esi
 b1c:	31 c0                	xor    %eax,%eax
 b1e:	e9 dd fa ff ff       	jmpq   600 <printf@plt>
 b23:	0f 1f 00             	nopl   (%rax)
 b26:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
 b2d:	00 00 00 

0000000000000b30 <complicated_func>:
void NO_INLINE complicated_func() {
 b30:	53                   	push   %rbx
    scanf("%d\n", &x);
 b31:	48 8d 3d 3c 01 00 00 	lea    0x13c(%rip),%rdi        # c74 <_IO_stdin_used+0x4>
            printf("%d\n", y);
 b38:	48 8d 1d 35 01 00 00 	lea    0x135(%rip),%rbx        # c74 <_IO_stdin_used+0x4>
void NO_INLINE complicated_func() {
 b3f:	48 83 ec 10          	sub    $0x10,%rsp
 b43:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
 b4a:	00 00 
 b4c:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
 b51:	31 c0                	xor    %eax,%eax
    scanf("%d\n", &x);
 b53:	48 89 e6             	mov    %rsp,%rsi
 b56:	e8 b5 fa ff ff       	callq  610 <__isoc99_scanf@plt>
    volatile int y = x;
 b5b:	8b 04 24             	mov    (%rsp),%eax
 b5e:	89 44 24 04          	mov    %eax,0x4(%rsp)
 b62:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
            y += i;
 b68:	8b 44 24 04          	mov    0x4(%rsp),%eax
            printf("%d\n", y);
 b6c:	48 89 df             	mov    %rbx,%rdi
            y += i;
 b6f:	89 44 24 04          	mov    %eax,0x4(%rsp)
            printf("%d\n", y);
 b73:	8b 74 24 04          	mov    0x4(%rsp),%esi
 b77:	31 c0                	xor    %eax,%eax
 b79:	e8 82 fa ff ff       	callq  600 <printf@plt>
            y += i;
 b7e:	8b 44 24 04          	mov    0x4(%rsp),%eax
            printf("%d\n", y);
 b82:	48 89 df             	mov    %rbx,%rdi
            y += i;
 b85:	83 c0 01             	add    $0x1,%eax
 b88:	89 44 24 04          	mov    %eax,0x4(%rsp)
            printf("%d\n", y);
 b8c:	8b 74 24 04          	mov    0x4(%rsp),%esi
 b90:	31 c0                	xor    %eax,%eax
 b92:	e8 69 fa ff ff       	callq  600 <printf@plt>
    } while (y == 7);
 b97:	8b 44 24 04          	mov    0x4(%rsp),%eax
 b9b:	83 f8 07             	cmp    $0x7,%eax
 b9e:	74 c8                	je     b68 <complicated_func+0x38>
    printf("%d\n", y);
 ba0:	8b 74 24 04          	mov    0x4(%rsp),%esi
 ba4:	48 8d 3d c9 00 00 00 	lea    0xc9(%rip),%rdi        # c74 <_IO_stdin_used+0x4>
 bab:	31 c0                	xor    %eax,%eax
 bad:	e8 4e fa ff ff       	callq  600 <printf@plt>
}
 bb2:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
 bb7:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
 bbe:	00 00 
 bc0:	75 06                	jne    bc8 <complicated_func+0x98>
 bc2:	48 83 c4 10          	add    $0x10,%rsp
 bc6:	5b                   	pop    %rbx
 bc7:	c3                   	retq   
 bc8:	e8 23 fa ff ff       	callq  5f0 <__stack_chk_fail@plt>
 bcd:	0f 1f 00             	nopl   (%rax)

0000000000000bd0 <bar>:
#include "blah.h"

static void NO_INLINE bar() {
    asm("");
}
 bd0:	c3                   	retq   
 bd1:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
 bd6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
 bdd:	00 00 00 

0000000000000be0 <func>:

void func() {
    // which bar?
    bar();
 be0:	31 c0                	xor    %eax,%eax
 be2:	eb ec                	jmp    bd0 <bar>
 be4:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
 beb:	00 00 00 
 bee:	66 90                	xchg   %ax,%ax

0000000000000bf0 <__libc_csu_init>:
 bf0:	41 57                	push   %r15
 bf2:	41 56                	push   %r14
 bf4:	49 89 d7             	mov    %rdx,%r15
 bf7:	41 55                	push   %r13
 bf9:	41 54                	push   %r12
 bfb:	4c 8d 25 de 11 20 00 	lea    0x2011de(%rip),%r12        # 201de0 <__frame_dummy_init_array_entry>
 c02:	55                   	push   %rbp
 c03:	48 8d 2d de 11 20 00 	lea    0x2011de(%rip),%rbp        # 201de8 <__init_array_end>
 c0a:	53                   	push   %rbx
 c0b:	41 89 fd             	mov    %edi,%r13d
 c0e:	49 89 f6             	mov    %rsi,%r14
 c11:	4c 29 e5             	sub    %r12,%rbp
 c14:	48 83 ec 08          	sub    $0x8,%rsp
 c18:	48 c1 fd 03          	sar    $0x3,%rbp
 c1c:	ff 15 d6 13 20 00    	callq  *0x2013d6(%rip)        # 201ff8 <.got+0x28>
 c22:	48 85 ed             	test   %rbp,%rbp
 c25:	74 1f                	je     c46 <__libc_csu_init+0x56>
 c27:	31 db                	xor    %ebx,%ebx
 c29:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
 c30:	4c 89 fa             	mov    %r15,%rdx
 c33:	4c 89 f6             	mov    %r14,%rsi
 c36:	44 89 ef             	mov    %r13d,%edi
 c39:	41 ff 14 dc          	callq  *(%r12,%rbx,8)
 c3d:	48 83 c3 01          	add    $0x1,%rbx
 c41:	48 39 dd             	cmp    %rbx,%rbp
 c44:	75 ea                	jne    c30 <__libc_csu_init+0x40>
 c46:	48 83 c4 08          	add    $0x8,%rsp
 c4a:	5b                   	pop    %rbx
 c4b:	5d                   	pop    %rbp
 c4c:	41 5c                	pop    %r12
 c4e:	41 5d                	pop    %r13
 c50:	41 5e                	pop    %r14
 c52:	41 5f                	pop    %r15
 c54:	c3                   	retq   
 c55:	90                   	nop
 c56:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
 c5d:	00 00 00 

0000000000000c60 <__libc_csu_fini>:
 c60:	f3 c3                	repz retq 

Disassembly of section .fini:

0000000000000c64 <_fini>:
 c64:	48 83 ec 08          	sub    $0x8,%rsp
 c68:	48 83 c4 08          	add    $0x8,%rsp
 c6c:	c3                   	retq   
